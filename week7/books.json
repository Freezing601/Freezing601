[
  {
    "title": "Clean Code",
    "author": "Robert C. Martin",
    "description": "This book teaches you how to write clean, maintainable code with practical examples. It covers principles like SOLID, DRY, and how to handle error cases properly. A must-read for any professional developer wanting to improve their coding standards and team collaboration skills.",
    "price": 35.99,
    "publisher": "Prentice Hall",
    "pages": 464,
    "topics": ["Software Development", "Code Quality", "Best Practices"]
  },
  {
    "title": "The Pragmatic Programmer",
    "author": "Andrew Hunt, David Thomas",
    "description": "A classic book that provides timeless software engineering advice. Covers topics from personal responsibility to architectural techniques. The tips about orthogonality, reversibility, and the stone soup story will make you a more effective programmer in any language or framework.",
    "price": 29.99,
    "publisher": "Addison-Wesley",
    "pages": 352,
    "topics": ["Programming Techniques", "Career Growth", "Software Engineering"]
  },
  {
    "title": "Designing Data-Intensive Applications",
    "author": "Martin Kleppmann",
    "description": "This book explores the principles behind reliable, scalable systems. It compares different database paradigms (relational vs NoSQL), discusses distributed system challenges like consensus algorithms, and shows how to make trade-offs between consistency and availability in your architectures.",
    "price": 45.50,
    "publisher": "O'Reilly Media",
    "pages": 600,
    "topics": ["Distributed Systems", "Database Design", "Scalability"]
  },
  {
    "title": "Introduction to Algorithms",
    "author": "Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein",
    "description": "Often called 'CLRS', this is the definitive textbook on algorithms. It provides rigorous mathematical analysis alongside practical implementations. The book covers everything from basic data structures to advanced topics like NP-completeness, making it essential for technical interviews and CS studies.",
    "price": 89.99,
    "publisher": "MIT Press",
    "pages": 1312,
    "topics": ["Algorithms", "Data Structures", "Computer Science"]
  },
  {
    "title": "Structure and Interpretation of Computer Programs",
    "author": "Harold Abelson, Gerald Jay Sussman",
    "description": "Known as 'SICP', this book uses Scheme to teach fundamental programming concepts. Through building interpreters and compilers, you'll learn about abstraction, recursion, and language design. The exercises will challenge you to think differently about problem solving in any language.",
    "price": 55.25,
    "publisher": "MIT Press",
    "pages": 657,
    "topics": ["Programming Paradigms", "Functional Programming", "Lisp"]
  },
  {
    "title": "Code Complete",
    "author": "Steve McConnell",
    "description": "A comprehensive guide to software construction that covers everything from variable naming to system architecture. The empirical data on practices like code reviews and defensive programming make this an invaluable reference for team leads and junior developers alike.",
    "price": 42.75,
    "publisher": "Microsoft Press",
    "pages": 960,
    "topics": ["Software Construction", "Coding Standards", "Project Management"]
  },
  {
    "title": "The Mythical Man-Month",
    "author": "Fred Brooks",
    "description": "This classic collection of essays reveals timeless truths about software project management. Brooks' Law ('adding manpower to a late project makes it later') and the concept of conceptual integrity explain why some projects succeed while others fail catastrophically.",
    "price": 32.99,
    "publisher": "Addison-Wesley",
    "pages": 322,
    "topics": ["Software Engineering", "Project Management", "Team Dynamics"]
  },
  {
    "title": "Refactoring: Improving the Design of Existing Code",
    "author": "Martin Fowler",
    "description": "This book introduces systematic techniques for improving code without changing its behavior. The catalog of refactorings (like Extract Method and Replace Conditional with Polymorphism) provides concrete recipes for transforming messy code into clean, maintainable designs.",
    "price": 47.50,
    "publisher": "Addison-Wesley",
    "pages": 455,
    "topics": ["Refactoring", "Design Patterns", "Code Quality"]
  },
  {
    "title": "Domain-Driven Design",
    "author": "Eric Evans",
    "description": "Presents comprehensive principles for modeling complex business domains in software. The patterns like Entities, Value Objects, and Aggregates help bridge the gap between technical implementation and business requirements, leading to more maintainable systems.",
    "price": 52.30,
    "publisher": "Addison-Wesley",
    "pages": 560,
    "topics": ["Software Design", "Architecture", "Business Logic"]
  },
  {
    "title": "You Don't Know JS",
    "author": "Kyle Simpson",
    "description": "This book series dives deep into JavaScript's core mechanisms like scope, closures, prototypes, and async programming. It will transform you from someone who uses JS to someone who truly understands how the language works under the hood.",
    "price": 39.95,
    "publisher": "O'Reilly Media",
    "pages": 278,
    "topics": ["JavaScript", "Frontend Development", "Programming Languages"]
  }
]